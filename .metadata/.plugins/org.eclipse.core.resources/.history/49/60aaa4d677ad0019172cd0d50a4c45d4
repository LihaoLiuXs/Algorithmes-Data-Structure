import java.util.*;

public class MergeKSortedLists {

	public static void main(String[] args) {
		//Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
		

	}
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0){
           return null; 
        }
        ListNode dummy = new ListNode(0);
        ListNode cur = dummy; 
        PriorityQueue<ListNode> minHeap = new PriorityQueue<ListNode>(11, new Comparator<ListNode>(){
            @Override
            public int compare(ListNode e1, ListNode e2){
                 if (e1.val == e2.val){
                     return 0; 
                 }
                 return e1.val < e2.val ? -1 : 1; 
            }
        }); 
        for (ListNode i : lists){
            if (i != null){
            minHeap.offer(i);
            }
        }
        while (!minHeap.isEmpty()){
              ListNode node = minHeap.poll();
              if (node.next != null){
                 minHeap.offer(node.next); 
              }
              cur.next = node;
              cur = cur.next;
        }
        return dummy.next; 
    }
    public class ListNode {
    	int val;
    	ListNode next;
    	ListNode(int x) { val = x; }
    }
}
